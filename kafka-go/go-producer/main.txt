package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strconv"
	"strings"

	"github.com/IBM/sarama"
)

type Stock struct {
	Symbol string  `json:"symbol"`
	Price  float64 `json:"price"`
	Volume int     `json:"volume"`
}

func main() {
	config := sarama.NewConfig()
	config.Producer.RequiredAcks = sarama.WaitForLocal
	config.Producer.Retry.Max = 5
	config.Producer.Return.Successes = true

	//Create new producer
	producer, err := sarama.NewSyncProducer([]string{"localhost:9092"}, config)
	if err != nil {
		log.Fatalln("Failed to start Sarama producer:", err)
	}
	defer producer.Close()

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt)

	scanner := bufio.NewScanner(os.Stdin)

	doneCh := make(chan struct{})

	go func() {
		fmt.Println("Enter stock data in format 'symbol:price:volume' (type 'exit' to quit)")
		fmt.Println("Example: AAPL:150.50:1000")
		fmt.Println("Or enter messages in format 'key:value' (regular text)")
		fmt.Println("For regular text, if no key is provided, a nil key will be used")
		for {
			fmt.Print("> ")
			if !scanner.Scan() {
				break
			}

			text := scanner.Text()
			if text == "exit" {
				break
			}

			parts := strings.Split(text, ":")

			// Check if input matches stock format (symbol:price:volume)
			if len(parts) == 3 {
				fmt.Println("Stock data detected")
				// Try to parse as stock data
				symbol := parts[0]
				price, err := strconv.ParseFloat(parts[1], 64)
				if err != nil {
					fmt.Println("Invalid price format. Use a number.")
					continue
				}

				volume, err := strconv.Atoi(parts[2])
				if err != nil {
					fmt.Println("Invalid volume format. Use an integer.")
					continue
				}

				// Create stock object
				stock := Stock{
					Symbol: symbol,
					Price:  price,
					Volume: volume,
				}

				// Convert stock to JSON
				jsonData, err := json.Marshal(stock)
				if err != nil {
					log.Printf("Failed to marshal stock to JSON: %v", err)
					continue
				}

				msg := &sarama.ProducerMessage{
					Topic: "stock-topic",
					Key:   sarama.StringEncoder(symbol),
					Value: sarama.StringEncoder(jsonData),
				}

				fmt.Printf("Sending stock: %s at $%.2f with volume %d\n", symbol, price, volume)

				partition, offset, err := producer.SendMessage(msg)
				if err != nil {
					log.Printf("Failed to send stock message: %v", err)
					continue
				}

				log.Printf("Stock sent to partition %d at offset %d\n", partition, offset)
			} else {
				// Handle as regular text message
				var key, value string
				parts := strings.SplitN(text, ":", 2)

				if len(parts) == 2 {
					key = parts[0]
					value = parts[1]
					fmt.Printf("Using key: %s, value: %s\n", key, value)
				} else {
					value = text
					fmt.Printf("No key provided. Using value: %s\n", value)
				}

				msg := &sarama.ProducerMessage{
					Topic: "news-topic",
					Value: sarama.StringEncoder(value),
				}

				if key != "" {
					msg.Key = sarama.StringEncoder(key)
				}

				partition, offset, err := producer.SendMessage(msg)
				if err != nil {
					log.Printf("Failed to send message: %v", err)
					continue
				}

				log.Printf("Message sent to partition %d at offset %d\n", partition, offset)
			}
		}

		close(doneCh)
	}()

	select {
	case <-signals:
		fmt.Println("\nReceived interrupt signal. Shutting down...")
	case <-doneCh:
		fmt.Println("Exiting program...")
	}

	fmt.Println("Producer terminated")
}
